import { Component, Input, OnInit } from '@angular/core';
import { VulnerabilitySummary } from "../../service";
import { VULNERABILITY_SCAN_STATUS, VULNERABILITY_SEVERITY } from "../../utils";
import { TranslateService } from "@ngx-translate/core";

@Component({
  selector: 'hbr-result-tip-histogram',
  templateUrl: './result-tip-histogram.component.html',
  styleUrls: ['./result-tip-histogram.component.scss']
})
export class ResultTipHistogramComponent implements OnInit {
  _tipTitle: string = "";
  @Input() vulnerabilitySummary: VulnerabilitySummary = {
    scan_status: VULNERABILITY_SCAN_STATUS.NOT_SCANNED,
    severity: "",
  };
  constructor(private translate: TranslateService) { }

  ngOnInit(): void {
    let key = "VULNERABILITY.SEVERITY.NONE";
    if (this.vulnerabilitySummary && this.vulnerabilitySummary.severity) {
      if (this.vulnerabilitySummary.severity === VULNERABILITY_SEVERITY.HIGH) {
        key = "VULNERABILITY.SEVERITY.HIGH";
      }
      if (this.vulnerabilitySummary.severity === VULNERABILITY_SEVERITY.MEDIUM) {
        key = "VULNERABILITY.SEVERITY.MEDIUM";
      }
      if (this.vulnerabilitySummary.severity === VULNERABILITY_SEVERITY.LOW) {
        key = "VULNERABILITY.SEVERITY.LOW";
      }
      if (this.vulnerabilitySummary.severity === VULNERABILITY_SEVERITY.UNKNOWN) {
        key = "VULNERABILITY.SEVERITY.UNKNOWN";
      }
      if (this.vulnerabilitySummary.severity === VULNERABILITY_SEVERITY.NEGLIGIBLE) {
        key = "VULNERABILITY.SEVERITY.NEGLIGIBLE";
      }
    }
    this.translate.get(key).subscribe( (res: string) => {
      this._tipTitle = res;
    });
  }
  get tipTitle(): string {
    return this._tipTitle;
  }

  get highCount(): number {
    if (this.vulnerabilitySummary && this.vulnerabilitySummary.summary
        && this.vulnerabilitySummary.summary.summary) {
      return this.vulnerabilitySummary.summary.summary[VULNERABILITY_SEVERITY.HIGH];
    }
    return 0;
  }

  get mediumCount(): number {
    if (this.vulnerabilitySummary && this.vulnerabilitySummary.summary
        && this.vulnerabilitySummary.summary.summary) {
      return this.vulnerabilitySummary.summary.summary[VULNERABILITY_SEVERITY.MEDIUM];
    }
    return 0;
  }

  get lowCount(): number {
    if (this.vulnerabilitySummary && this.vulnerabilitySummary.summary
        && this.vulnerabilitySummary.summary.summary) {
      return this.vulnerabilitySummary.summary.summary[VULNERABILITY_SEVERITY.LOW];
    }
    return 0;
  }

  get unknownCount(): number {
    if (this.vulnerabilitySummary && this.vulnerabilitySummary.summary
        && this.vulnerabilitySummary.summary.summary) {
      return this.vulnerabilitySummary.summary.summary[VULNERABILITY_SEVERITY.UNKNOWN];
    }
    return 0;
  }
  get negligibleCount(): number {
    if (this.vulnerabilitySummary && this.vulnerabilitySummary.summary
        && this.vulnerabilitySummary.summary.summary) {
      return this.vulnerabilitySummary.summary.summary[VULNERABILITY_SEVERITY.NEGLIGIBLE];
    }
    return 0;
  }
  get completeTimestamp(): Date {
    return this.vulnerabilitySummary && this.vulnerabilitySummary.end_time ? this.vulnerabilitySummary.end_time : new Date();
  }
  get isHigh(): boolean {
    return this.vulnerabilitySummary && VULNERABILITY_SEVERITY.HIGH === this.vulnerabilitySummary.severity;
  }
  get isMedium(): boolean {
    return this.vulnerabilitySummary && VULNERABILITY_SEVERITY.MEDIUM === this.vulnerabilitySummary.severity;
  }
  get isLow(): boolean {
    return this.vulnerabilitySummary && VULNERABILITY_SEVERITY.LOW === this.vulnerabilitySummary.severity;
  }
  get isUnknown(): boolean {
    return this.vulnerabilitySummary && VULNERABILITY_SEVERITY.UNKNOWN === this.vulnerabilitySummary.severity;
  }
  get isNegligible(): boolean {
    return this.vulnerabilitySummary && VULNERABILITY_SEVERITY.NEGLIGIBLE === this.vulnerabilitySummary.severity;
  }
  get isNone(): boolean {
    return !(this.isHigh || this.isMedium || this.isLow || this.isUnknown || this.isNegligible);
  }
}
