import {
  AfterViewInit,
  ChangeDetectionStrategy,
  Component,
  DoCheck,
  ElementRef,
  Input,
  OnInit,
  ViewChild
} from '@angular/core';
import { VULNERABILITY_SEVERITY } from "../../utils";
import { TranslateService } from "@ngx-translate/core";
import { forkJoin } from "rxjs";

@Component({
  selector: 'histogram-chart',
  templateUrl: './histogram-chart.component.html',
  styleUrls: ['./histogram-chart.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class HistogramChartComponent implements OnInit, AfterViewInit, DoCheck {
  @Input()
  highCount: number = 0;
  @Input()
  mediumCount: number = 0;
  @Input()
  lowCount: number = 0;
  @Input()
  unknownCount: number = 0;
  @Input()
  negligibleCount: number = 0;
  @Input()
  isWhiteBackground: boolean = false;
  highText: string;
  mediumText: string;
  lowText: string;
  unknownText: string;
  negligibleText: string;
  max: number;
  scale: number;
  hasViewInit: boolean = false;
  @ViewChild('barChart', {static: false}) barChart: ElementRef;
  public context: CanvasRenderingContext2D;
  constructor(private translate: TranslateService) { }

  ngOnInit() {
    forkJoin( [this.translate.get('VULNERABILITY.SEVERITY.HIGH'),
        this.translate.get("VULNERABILITY.SEVERITY.MEDIUM"),
        this.translate.get("VULNERABILITY.SEVERITY.LOW"),
        this.translate.get("VULNERABILITY.SEVERITY.UNKNOWN"),
        this.translate.get("VULNERABILITY.SEVERITY.NEGLIGIBLE")])
        .subscribe( (res: string[]) => {
           this.highText = res[0];
           this.mediumText = res[1];
           this.lowText = res[2];
           this.unknownText = res[3];
           this.negligibleText = res[4];
           this.intiChart();
    });
  }
  ngAfterViewInit(): void {
    this.hasViewInit = true;
    this.intiChart();
  }
  ngDoCheck() {
    if (this.hasViewInit) {
      this.intiChart();
    }
  }
  intiChart() {
    if (!this.barChart) {
      console.log('Skipping initChart() because barChart is undefined');
      return;
    }
    this.getMax();
    this.barChart.nativeElement.width = "240";
    this.barChart.nativeElement.height = "165";
    this.context = this.barChart.nativeElement.getContext('2d');
    this.drawCoordinate();
    this.drawBar();
  }
  drawBar() {
    this.context.textBaseline = "middle";
    this.context.textAlign = "left";
    this.context.fillStyle = "#e62700";
    this.context.fillRect(40, 20, this.highCount / this.scale * 40, 15);
    this.context.fillText(this.highCount.toString(), (this.highCount / this.scale * 40) + 43, 27, 37);
    this.context.fillStyle = "yellow";
    this.context.fillRect(40, 45, this.mediumCount / this.scale * 40, 15);
    this.context.fillText(this.mediumCount.toString(), (this.mediumCount / this.scale * 40) + 43, 52, 37);
    this.context.fillStyle = "orange";
    this.context.fillRect(40, 70, this.lowCount / this.scale * 40, 15);
    this.context.fillText(this.lowCount.toString(), (this.lowCount / this.scale * 40) + 43, 77, 37);
    this.context.fillStyle = "grey";
    this.context.fillRect(40, 95, this.unknownCount / this.scale * 40, 15);
    this.context.fillText(this.unknownCount.toString(), (this.unknownCount / this.scale * 40) + 43, 102, 37);
    this.context.fillStyle = "green";
    this.context.fillRect(40, 120, this.negligibleCount / this.scale * 40, 15);
    this.context.fillText(this.negligibleCount.toString(), (this.negligibleCount / this.scale * 40) + 43, 127, 37);
  }
  drawCoordinate() {
    this.drawLine(40, 10, 40, 145);
    this.drawLine(40, 145, 240, 145);
    this.drawLine(80, 145, 80, 142);
    this.drawLine(120, 145, 120, 142);
    this.drawLine(160, 145, 160, 142);
    this.drawLine(200, 145, 200, 142);
    this.context.font = "12px";
    this.context.textAlign = "center";
    if (this.isWhiteBackground) {
      this.context.fillStyle = "#000";
    } else {
      this.context.fillStyle = "#fff";
    }
    this.context.fillText(this.scale.toString(), 80, 158, 50);
    this.context.fillText((2 * this.scale).toString(), 120, 158, 50);
    this.context.fillText((3 * this.scale).toString(), 160, 158, 50);
    this.context.fillText((4 * this.scale).toString(), 200, 158, 50);
    this.context.textBaseline = "middle";
    this.context.textAlign = "right";
    this.context.fillStyle = "#e62700";
    this.context.fillText(this.highText, 37, 27, 37);
    this.context.fillStyle = "yellow";
    this.context.fillText(this.mediumText, 37, 52, 37);
    this.context.fillStyle = "orange";
    this.context.fillText(this.lowText, 37, 77, 37);
    this.context.fillStyle = "grey";
    this.context.fillText(this.unknownText, 37, 102, 37);
    this.context.fillStyle = "green";
    this.context.fillText(this.negligibleText, 37, 127, 37);
  }
  drawLine(x, y, X, Y) {
    this.context.beginPath();
    this.context.moveTo(x, y);
    this.context.lineTo(X, Y);
    if (this.isWhiteBackground) {
      this.context.strokeStyle = "#000";
    } else {
      this.context.strokeStyle = "#fff";
    }
    this.context.stroke();
    this.context.closePath();
  }
  getMax() {
    let count = 1;
    if (this.negligibleCount > count) {
      count = this.negligibleCount;
    }
    if (this.unknownCount > count) {
      count = this.unknownCount;
    }
    if (this.lowCount > count) {
      count = this.lowCount;
    }
    if (this.mediumCount > count) {
      count = this.mediumCount;
    }
    if (this.highCount > count) {
      count = this.highCount;
    }
    this.max = count;
    this.scale = Math.ceil(count / 4);
  }
}
